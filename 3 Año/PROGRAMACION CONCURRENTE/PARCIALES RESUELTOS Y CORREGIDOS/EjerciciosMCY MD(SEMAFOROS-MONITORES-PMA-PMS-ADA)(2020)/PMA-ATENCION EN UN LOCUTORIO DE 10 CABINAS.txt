Resolver con PMA (Pasaje de Mensajes ASINCRÓNICOS) el siguiente problema.
Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado
que se encarga de atender a los clientes. Hay N clientes que al llegar esperan hasta que el
empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle.
El empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre
dando prioridad a los que terminaron de usar la cabina. Nota: maximizar la concurrencia;
suponga que hay una función Cobrar() llamada por el empleado que simula que el
empleado le cobra al cliente.
------------------------------------------------------------------------------------------------------
COMO RESOLVER?
COMO DICE EL ENUNCIADO VAMOS A TENER
 UN PROCESO EMPLEADO
 Y UN PROCESO CLIENTE
PROBLEMA: SIMULAR LA ATENCION A UN LOCUTORIO DONDE LOS CLIENTES VAN  A USAR UNA CABINA Y LUEGO LE PAGAN AL EMPLEADO 
Y SE RETIRAN 
-----------------------------------------------------------------------------------------------------
DEFINICION DE CANALES
chan solicitar (idCli);  // canal para que el usuario solicite una cabina 
chan usarCabina[idCabina] (idCli);  // arreglo de canales para guardar al usuario y la cabina
chan liberar (idCli, idCabina);// arreglo de canales para liberar al usuario de la cabina
chan irse[idCabina] ()  // se va de la cabina
----------------------------------------------------------------------------------------------------

Process Cliente[idC: 0..N-1] {
int numC;
send solicitar (idC); // enviar solicitar cabina 
receive usarCabina[idC](numC); // recibe usar cabina 
//Usa la cabina Telefónica
send liberar (idC, numC); //envia liberar cabina
receive irse[idC] (); // recibe el msj irse
};

---------------------------------------------------------------------------------------------------

Process Empleado {
int idC, numC, i;
queue libres;
// recorro con un for asegurandome que las cabinas esten habilitadas
for (i=1; i<10; i++) {
push (libres, i);
}
while (true) {
if (not empty (liberar)) { // si hay cabinas para liberar 
receive liberar (idC, numC); // libero una cabina con el cliente
Cobrar(numC, idC);  // cobrar al cliente y su cabina
send irse[idC] ();   // el cliente se va
push (libres, numC); //apilo una cabina a la cola
[](not empty (libres)) and (empty (liberar)) and (not empty (solicitar)) {  // si hay cabinas libre y el canal de liberada este vacia  y el canal de solicitar  no este vacia 
receive solicitar (idC);  // recibo el solicitar
pop (libres, numC);  // desencolo una cabina de la cola
send usarCabina[idC] (numC); // envio usar cabina 
fi;
};
}
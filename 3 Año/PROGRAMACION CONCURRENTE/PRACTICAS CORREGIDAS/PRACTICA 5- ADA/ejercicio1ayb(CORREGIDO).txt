1. Se requiere modelar un puente de un solo sentido, el puente solo soporta el peso de 5
unidades de peso. Cada auto pesa 1 unidad, cada camioneta pesa 2 unidades y cada camión
3 unidades. Suponga que hay una cantidad innumerable de vehículos (A autos, B
camionetas y C camiones).
a. Realice la solución suponiendo que todos los vehículos tienen la misma prioridad.

Procedure PuenteA is 

/definicion de tipos

TASK TYPE Auto;
TASK TYPE Camioneta;
Task Type Camiones;

//defincion de entrys
Task Puente IS
	entry AutoIn();
	entry AutoOut();
	entry CamionetaIn();
	entry CamionetaOut();
	entry CamionIn();
	entry CamionOut();
end Puente;

//inicializacion de variables
camiones = array[1..C] of camion; 
auto = array[1..A] of auto; 
camioneta = array[1..B] of camioneta; 

// ejecucio de los tasks
Task body Auto IS
  puente.AutoIn();
  -- Cruza el puente
  puente.AutoOut();
end Auto;

Task body Camioneta IS
	puente.CamionetaIn();
	-- Cruza el puente
	puente.CamionetaOut();
end Camioneta;

Task body Camiones IS
	puente.CamionIn();
	-- Cruza el puente
	puente.CamionOut();
end Camiones;

Task body Puente IS
	peso : Integer;
begin
	peso:=0;
	--Si no hay condicion puedo tirar un loop asi nomas.
	loop 
		--El select es no deterministico explicado en el punto 5
		select
			when ( peso <= 4 ) => accept AutoIn() IS
				peso := peso +1;
			end AutoIn;
			
			OR
			when ( peso <= 3 ) => accept CamionetaIn() IS
				peso := peso +2; 
			end CamionetaIn;
			
			OR
			when ( peso <= 2 ) => accept CamionIn() IS
				peso := peso +3; 
			end CamionIn;
			
			OR
			accept CamionOut() IS
				peso := peso - 3;
			end CamionOut;
			
			OR
			accept CamionetaOut() IS
				peso := peso - 2;
			end CamionetaOut;
			
			OR
			accept AutoOut() IS
				peso := peso - 1;
			end AutoOut;		
				
		end select;
	end loop;
		
end Puente;

//programa principal
Begin

End PuenteA;


____________________________________________________________________________________________________

b. Modifique la solución para que tengan mayor prioridad los camiones que el resto de los
vehículos.

____________________________________________________________________________________________________

// definicion de task
TASK TYPE Auto;
TASK TYPE Camioneta;
Task Type Camiones;

//definicion de entrys
Task Puente IS
	entry AutoIn();
	entry AutoOut();
	entry CamionetaIn();
	entry CamionetaOut();
	entry CamionIn();
	entry CamionOut();
end Puente;

//inicializacion de variables
camiones = array[1..C] of camion; 
auto = array[1..A] of auto; 
camioneta = array[1..B] of camioneta; 

// ejecucio de los tasks
Task body Auto IS
  puente.AutoIn();
  -- Cruza el puente
  puente.AutoOut();
end Auto;

Task body Camioneta IS
	puente.CamionetaIn();
	-- Cruza el puente
	puente.CamionetaOut();
end Camioneta;

Task body Camiones IS
	puente.CamionIn();
	-- Cruza el puente
	puente.CamionOut();
end Camiones;

Task body Puente IS
	peso : Integer;
begin
	peso:=0;
	loop 
		select
			when ((CamionIn’count = 0)AND( peso <= 4 )) => accept AutoIn() IS
				peso := peso +1;
			end AutoIn;
			
			OR
			when ((CamionIn’count = 0)AND( peso <= 3 )) => accept CamionetaIn() IS
				peso := peso +2; 
			end CamionetaIn;
			
			OR
			when ( peso <= 2 ) => accept CamionIn() IS
				peso := peso +3; 
			end CamionIn;
			
			OR
			accept CamionOut() IS
				peso := peso - 3;
			end CamionOut;
			
			OR
			accept CamionetaOut() IS
				peso := peso - 2;
			end CamionetaOut;
			
			OR
			accept AutoOut() IS
				peso := peso - 1;
			end AutoOut;		
				
		end select;
	end loop;
		
end Puente;


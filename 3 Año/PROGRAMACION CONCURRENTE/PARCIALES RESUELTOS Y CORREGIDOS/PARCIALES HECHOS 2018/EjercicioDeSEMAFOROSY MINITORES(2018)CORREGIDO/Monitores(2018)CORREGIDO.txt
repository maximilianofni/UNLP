En un evento culinario hay N personas que van a comer y un empleado que los atiende de acuerdo  al orden de llegada. La persona le indica al empleado que plato quiere y este se lo entrega.Nota:Maximizar la concurrencia
----------------------------------------------------------------------------------------------------------
como Resolver?
en el siguiente ejercicio como vemos tenemos :
1 proceso de N personas en el cual tenemos que simular la accion de pedir al empleado un plato e irse.
Entonces Tenemos un MONITOR "empleado" con dos procedimientos uno "LLEGAR" y otro "SALIR"
-----------------------------------------------------------------------------------------------------

Monitor Empleado()
        cond cliente;  //variable condicion del monitor para ir sincronizando a las personas
        cant: integer; // variable contador para incrementar/decrementar a las personas que van acceder al monitor
        boolean Elibre: true // variable booleana para comprobar si hay alguien usando el monitor
_______________________________________________________________________

Procedure Llegar[i:1..N]
begin
          if(Elibre) // si el empleado está libre
              Elibre := false// lo seteo
          else 
                cant:= cant + 1; //incremento para decir que hay cliente esperando en el monitor
                wait(cliente); // duermo al proceso en la variable condition
end 
_________________________________________________________________________

Procedure Salir[i:1..N]
begin
          if(cant > 0) // si hay Procesos esperando en el monitor
             cant:= cant -1  // decremento en 1
             signal(cliente) // despierto a cualquier proceso que este esperando en el monitor
         else
             Elibre := true; //seteo en true a la variable boleana para decir q el empleado esta libre
end.
_______________________________________________________________________


Process clientes [i:1..N]
{
   Empleado.llegar(i);
   //Indicar Plato y entregar plato
   Empleado.Salir(i)
}

Object subclass: #Cliente	instanceVariableNames: 'nombre direccion programaBeneficios'	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:55'!programaBeneficios	^ programaBeneficios! !!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:55'!programaBeneficios: anObject	programaBeneficios := anObject! !!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:45'!direccion	^ direccion! !!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:45'!direccion: anObject	direccion := anObject! !!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:45'!nombre: anObject	nombre := anObject! !!Cliente methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:45'!nombre	^ nombre! !!Cliente methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:00'!calcularBeneficioEnvio: costoEnvio	| costoConDescuento |	costoConDescuento := programaBeneficios		ifNil: [ costoEnvio ]		ifNotNil: [ programaBeneficios aplicarDescuentoEnvio: costoEnvio ].	^ costoConDescuento! !!Cliente methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:03'!despachar: orden usando: sistemaDeEnvios	^ programaBeneficios		ifNil: [ sistemaDeEnvios despacharEnvioNormal: orden ]		ifNotNil: [ programaBeneficios despachar: orden usando: sistemaDeEnvios ]! !!Cliente methodsFor: 'testing' stamp: 'ArturoZambrano 6/19/2018 10:06'!tienePrograma ^programaBeneficios isNotNil ! !!Cliente methodsFor: 'printing' stamp: 'ArturoZambrano 6/24/2018 11:02'!printOn: aStream	aStream		nextPutAll: 'Cliente nombre: ';		nextPutAll: nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cliente class	instanceVariableNames: ''!!Cliente class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:37'!nombre:aString direccion:otherString ^ self new nombre: aString; direccion: otherString; yourself.! !Object subclass: #Orden	instanceVariableNames: 'cliente producto costoDeEnvio conBeneficio'	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 11:04'!cliente: unCliente	cliente := unCliente.	conBeneficio :=  cliente tienePrograma ! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:46'!costoDeEnvio	^ costoDeEnvio! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:46'!costoDeEnvio: anObject	costoDeEnvio := anObject! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:46'!cliente	^ cliente! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:46'!producto: anObject	producto := anObject! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 11:00'!costoTotal ^ producto precio  + costoDeEnvio.! !!Orden methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:46'!producto	^ producto! !!Orden methodsFor: 'testing' stamp: 'ArturoZambrano 6/19/2018 11:02'!esOrdenConBeneficios  ^conBeneficio ! !!Orden methodsFor: 'initialize' stamp: 'ArturoZambrano 6/19/2018 11:02'!initialize  costoDeEnvio :=0.  conBeneficio := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Orden class	instanceVariableNames: ''!!Orden class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 09:54'!producto: unProducto para: unCliente costoEnvio: envio	^ self new		producto: unProducto;		cliente: unCliente;		costoDeEnvio: envio;		yourself! !Object subclass: #Producto	instanceVariableNames: 'precio nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!Producto methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:36'!precio	^ precio! !!Producto methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:36'!precio: anObject	precio := anObject! !!Producto methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:36'!nombre	^ nombre! !!Producto methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 09:36'!nombre: anObject	nombre := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Producto class	instanceVariableNames: ''!!Producto class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:42'!nombre: aString precio: aNumber   ^ self new nombre:aString; precio:aNumber; yourself.! !Object subclass: #ProgramaBeneficios	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!ProgramaBeneficios methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:03'!despachar: orden usando: sistemaDeEnvios ^ self subclassResponsibility  ! !!ProgramaBeneficios methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:00'!aplicarDescuentoEnvio: aNumber ^ self subclassResponsibility  ! !ProgramaBeneficios subclass: #Premium	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!Premium methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:04'!despachar: orden usando: sistemaDeEnvios   sistemaDeEnvios despacharEnvioNormal: orden.! !!Premium methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:00'!aplicarDescuentoEnvio: aNumber ^ 0! !ProgramaBeneficios subclass: #Prime	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!Prime methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:05'!despachar: orden usando: sistemaDeEnvios	sistemaDeEnvios despacharEnvioUrgente: orden! !!Prime methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:00'!aplicarDescuentoEnvio: aNumber ^ aNumber/2! !Object subclass: #SistemaDeVentas	instanceVariableNames: 'ordenes'	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Parcial'!!SistemaDeVentas methodsFor: 'initialize - release' stamp: 'ArturoZambrano 6/19/2018 09:52'!initialize ordenes:=OrderedCollection new.! !!SistemaDeVentas methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 10:52'!ordenes   ^ordenes .! !!SistemaDeVentas methodsFor: 'accessing' stamp: 'ArturoZambrano 6/19/2018 10:52'!cantidadDeOrdenes   ^ordenes size.! !!SistemaDeVentas methodsFor: 'actions' stamp: 'ArturoZambrano 6/19/2018 10:02'!vender: unProducto a: unCliente	(SistemaDeStock hayStock: unProducto)		ifTrue: [ | orden envio |			envio := unCliente calcularBeneficioEnvio: (SistemaDeEnvios cotizarEnvio: unProducto).			orden := Orden producto: unProducto para: unCliente costoEnvio: envio.						SistemaDeStock decrementarStock: unProducto.			SistemaDeCobros cobrar:orden.			unCliente despachar:orden usando:SistemaDeEnvios.						ordenes add: orden.						]! !!SistemaDeVentas methodsFor: 'reporting' stamp: 'ArturoZambrano 6/24/2018 11:04'!listadoDeClienteSinPrograma	^ ((ordenes collect: [ :o | o cliente ]) reject: [ :c | c tienePrograma ]) asSet		asSortedCollection: [ :cliente1 :cliente2 | cliente1 nombre < cliente2 nombre ]! !!SistemaDeVentas methodsFor: 'reporting' stamp: 'ArturoZambrano 6/19/2018 11:01'!totalVentasSinBeneficios	^ (ordenes reject: [ :orden | orden esOrdenConBeneficios ]) sum:[:o| o costoTotal ]! !Object subclass: #SistemaDeEnvios	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Modules'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SistemaDeEnvios class	instanceVariableNames: ''!!SistemaDeEnvios class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 09:36'!cotizarEnvio: unProducto	^ (unProducto precio * 2) sqrt! !!SistemaDeEnvios class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:55'!despacharEnvioNormal: unaOrden	| msg |	msg := 'Despachando modo normal ' , unaOrden producto nombre.	Transcript cr; show: msg.	^ msg! !!SistemaDeEnvios class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:55'!despacharEnvioUrgente: unaOrden	| msg |	msg := 'Despachando modo urgente ' , unaOrden producto nombre.	Transcript cr; show: msg.	^ msg! !Object subclass: #SistemaDeStock	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Modules'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SistemaDeStock class	instanceVariableNames: ''!!SistemaDeStock class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:55'!decrementarStock: unProducto	Transcript cr; show: 'Decrementando stock de: ', unProducto nombre.! !!SistemaDeStock class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:42'!hayStock: unProducto	^ (unProducto nombre matchesRegex: 'A\w*')not.! !TestCase subclass: #SistemaDeVentasTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon-Tests'!!SistemaDeVentasTest commentStamp: '<historical>' prior: 0!A SistemaDeVentasTest is a test class for testing the behavior of SistemaDeVentas!!SistemaDeVentasTest methodsFor: 'tests-reporting' stamp: 'ArturoZambrano 6/24/2018 11:00'!testListadoDeClienteSinPrograma	| sistemaVentas cliente cliente2 cliente3 productoNoExistente productoExistente |	sistemaVentas := SistemaDeVentas new.	cliente := Cliente nombre: 'Juan' direccion: 'algunCalle nro 3939'.	productoNoExistente := Producto nombre: 'Auriculares' precio: 1000.	productoExistente := Producto nombre: 'Parlantes' precio: 4.5.	sistemaVentas vender: productoNoExistente a: cliente.	"no existia al producto por lo tanto la orden no debe crearse."	sistemaVentas vender: productoExistente a: cliente.	cliente2 := Cliente nombre: 'Pedro' direccion: 'penny lane'.	cliente2 programaBeneficios: Premium new.	sistemaVentas vender: productoExistente a: cliente2.	cliente3 := Cliente nombre: 'APepe' direccion: '37 nro 849'.	sistemaVentas vender: productoExistente a: cliente3.	self assert: sistemaVentas listadoDeClienteSinPrograma first equals: cliente3.	self assert: sistemaVentas listadoDeClienteSinPrograma last equals: cliente! !!SistemaDeVentasTest methodsFor: 'tests-reporting' stamp: 'ArturoZambrano 6/24/2018 10:48'!testTotalVentasSinBeneficios	| sistemaVentas cliente cliente2 productoNoExistente productoExistente |	sistemaVentas := SistemaDeVentas new.	cliente := Cliente nombre: 'Juan' direccion: 'algunCalle nro 3939'.	productoNoExistente := Producto nombre: 'Auriculares' precio: 1000.	productoExistente := Producto nombre: 'Parlantes' precio: 4.5.	sistemaVentas vender: productoNoExistente a: cliente.	"no existia al producto por lo tanto la orden no debe crearse."	sistemaVentas vender: productoExistente a: cliente.	self assert: sistemaVentas totalVentasSinBeneficios equals: 7.5.	cliente2 := Cliente nombre: 'Pedro' direccion: 'penny lane'.	cliente2 programaBeneficios: Premium new.	sistemaVentas vender: productoExistente a: cliente2.	self assert: sistemaVentas totalVentasSinBeneficios equals: 7.5! !!SistemaDeVentasTest methodsFor: 'tests-actions' stamp: 'ArturoZambrano 6/24/2018 10:48'!testVenderA	| sistemaVentas cliente cliente2 productoNoExistente productoExistente |	sistemaVentas := SistemaDeVentas new.	cliente := Cliente nombre: 'Juan' direccion: 'algunCalle nro 3939'.	productoNoExistente := Producto nombre: 'Auriculares' precio: 1000.	productoExistente := Producto nombre: 'Parlantes' precio: 4.5.	self assert: sistemaVentas cantidadDeOrdenes equals: 0.	sistemaVentas vender: productoNoExistente a: cliente.	"no existia al prodocuto por lo tanto la orden no debe crearse."	self assert: sistemaVentas cantidadDeOrdenes equals: 0.	sistemaVentas vender: productoExistente a: cliente.	self assert: sistemaVentas cantidadDeOrdenes equals: 1.	cliente2 := Cliente nombre: 'Pedro' direccion: 'penny lane'.	cliente2 programaBeneficios: Premium new.	sistemaVentas vender: productoExistente a: cliente2.	self assert: sistemaVentas cantidadDeOrdenes equals: 2.	! !Object subclass: #SistemaDeCobros	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Amazon'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SistemaDeCobros class	instanceVariableNames: ''!!SistemaDeCobros class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 6/19/2018 10:56'!cobrar: unaOrden	Transcript  cr;show: 'Cobrando orden'! !